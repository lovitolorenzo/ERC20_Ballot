/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenizedBallot,
  TokenizedBallotInterface,
} from "../../../contracts/TokenizedBallot.sol/TokenizedBallot";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proposalNames",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "_tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_referenceBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "referenceBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenContract",
    outputs: [
      {
        internalType: "contract ITokenizedVotes",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "votePower",
    outputs: [
      {
        internalType: "uint256",
        name: "votePower_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "votePowerSpent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningProposal",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "name",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
        ],
        internalType: "struct TokenizedBallot.Proposal",
        name: "winningProposal_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e8438038062000e84833981810160405281019062000037919062000384565b60005b8351811015620000ce5760026040518060400160405280868481518110620000675762000066620003ff565b5b6020026020010151815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508080620000c5906200045d565b9150506200003a565b5081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600081905550505050620004aa565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001848262000139565b810181811067ffffffffffffffff82111715620001a657620001a56200014a565b5b80604052505050565b6000620001bb62000120565b9050620001c9828262000179565b919050565b600067ffffffffffffffff821115620001ec57620001eb6200014a565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620002178162000202565b81146200022357600080fd5b50565b60008151905062000237816200020c565b92915050565b6000620002546200024e84620001ce565b620001af565b905080838252602082019050602084028301858111156200027a5762000279620001fd565b5b835b81811015620002a7578062000292888262000226565b8452602084019350506020810190506200027c565b5050509392505050565b600082601f830112620002c957620002c862000134565b5b8151620002db8482602086016200023d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200031182620002e4565b9050919050565b620003238162000304565b81146200032f57600080fd5b50565b600081519050620003438162000318565b92915050565b6000819050919050565b6200035e8162000349565b81146200036a57600080fd5b50565b6000815190506200037e8162000353565b92915050565b600080600060608486031215620003a0576200039f6200012a565b5b600084015167ffffffffffffffff811115620003c157620003c06200012f565b5b620003cf86828701620002b1565b9350506020620003e28682870162000332565b9250506040620003f5868287016200036d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200046a8262000349565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200049f576200049e6200042e565b5b600182019050919050565b6109ca80620004ba6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639e90d0d91161005b5780639e90d0d9146100ef578063b384abef1461011f578063d94c8caa1461013b578063e490e699146101595761007d565b8063013cf08b1461008257806355a373d6146100b3578063609ff1bd146100d1575b600080fd5b61009c600480360381019061009791906104fd565b610189565b6040516100aa929190610552565b60405180910390f35b6100bb6101bd565b6040516100c891906105fa565b60405180910390f35b6100d96101e3565b6040516100e69190610662565b60405180910390f35b610109600480360381019061010491906106bb565b6102ad565b60405161011691906106e8565b60405180910390f35b61013960048036038101906101349190610703565b6102c5565b005b6101436103ac565b60405161015091906106e8565b60405180910390f35b610173600480360381019061016e91906106bb565b6103b2565b60405161018091906106e8565b60405180910390f35b6002818154811061019957600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101eb6104a5565b6000805b6002805490508110156102a857816002828154811061021157610210610743565b5b9060005260206000209060020201600101541115610295576002818154811061023d5761023c610743565b5b90600052602060002090600202016001015491506002818154811061026557610264610743565b5b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505092505b80806102a0906107a1565b9150506101ef565b505090565b60036020528060005260406000206000915090505481565b60006102d0336103b2565b905081811115610315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030c90610892565b60405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461036491906108b2565b9250508190555081600284815481106103805761037f610743565b5b906000526020600020906002020160010160008282546103a091906108b2565b92505081905550505050565b60005481565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a46b1a8846000546040518363ffffffff1660e01b81526004016104539291906108f5565b602060405180830381865afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190610933565b61049e9190610960565b9050919050565b604051806040016040528060008019168152602001600081525090565b600080fd5b6000819050919050565b6104da816104c7565b81146104e557600080fd5b50565b6000813590506104f7816104d1565b92915050565b600060208284031215610513576105126104c2565b5b6000610521848285016104e8565b91505092915050565b6000819050919050565b61053d8161052a565b82525050565b61054c816104c7565b82525050565b60006040820190506105676000830185610534565b6105746020830184610543565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105c06105bb6105b68461057b565b61059b565b61057b565b9050919050565b60006105d2826105a5565b9050919050565b60006105e4826105c7565b9050919050565b6105f4816105d9565b82525050565b600060208201905061060f60008301846105eb565b92915050565b61061e8161052a565b82525050565b61062d816104c7565b82525050565b6040820160008201516106496000850182610615565b50602082015161065c6020850182610624565b50505050565b60006040820190506106776000830184610633565b92915050565b60006106888261057b565b9050919050565b6106988161067d565b81146106a357600080fd5b50565b6000813590506106b58161068f565b92915050565b6000602082840312156106d1576106d06104c2565b5b60006106df848285016106a6565b91505092915050565b60006020820190506106fd6000830184610543565b92915050565b6000806040838503121561071a576107196104c2565b5b6000610728858286016104e8565b9250506020610739858286016104e8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107ac826104c7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036107de576107dd610772565b5b600182019050919050565b600082825260208201905092915050565b7f546f6b656e697a656442616c6c6f743a20747279696e6720746f20766f74652060008201527f77697468206d6f7265207468616e2074686520766f746520706f77657220617660208201527f61696c61626c6520666f722074686973206163636f756e740000000000000000604082015250565b600061087c6058836107e9565b9150610887826107fa565b606082019050919050565b600060208201905081810360008301526108ab8161086f565b9050919050565b60006108bd826104c7565b91506108c8836104c7565b92508282019050808211156108e0576108df610772565b5b92915050565b6108ef8161067d565b82525050565b600060408201905061090a60008301856108e6565b6109176020830184610543565b9392505050565b60008151905061092d816104d1565b92915050565b600060208284031215610949576109486104c2565b5b60006109578482850161091e565b91505092915050565b600061096b826104c7565b9150610976836104c7565b925082820390508181111561098e5761098d610772565b5b9291505056fea2646970667358221220f14ec876275f0b3515636794fc2bdff495a09a28d37875393560b161c93d4fc264736f6c63430008110033";

type TokenizedBallotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenizedBallotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenizedBallot__factory extends ContractFactory {
  constructor(...args: TokenizedBallotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    proposalNames: PromiseOrValue<BytesLike>[],
    _tokenContract: PromiseOrValue<string>,
    _referenceBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenizedBallot> {
    return super.deploy(
      proposalNames,
      _tokenContract,
      _referenceBlock,
      overrides || {}
    ) as Promise<TokenizedBallot>;
  }
  override getDeployTransaction(
    proposalNames: PromiseOrValue<BytesLike>[],
    _tokenContract: PromiseOrValue<string>,
    _referenceBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      proposalNames,
      _tokenContract,
      _referenceBlock,
      overrides || {}
    );
  }
  override attach(address: string): TokenizedBallot {
    return super.attach(address) as TokenizedBallot;
  }
  override connect(signer: Signer): TokenizedBallot__factory {
    return super.connect(signer) as TokenizedBallot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenizedBallotInterface {
    return new utils.Interface(_abi) as TokenizedBallotInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenizedBallot {
    return new Contract(address, _abi, signerOrProvider) as TokenizedBallot;
  }
}
