/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenizedBallot,
  TokenizedBallotInterface,
} from "../../contracts/TokenizedBallot";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proposalNames",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "_tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_referenceBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "referenceBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenContract",
    outputs: [
      {
        internalType: "contract ITokenizedVotes",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107253803806107258339818101604052810190610032919061034a565b60005b83518110156100c2576002604051806040016040528086848151811061005e5761005d6103b9565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806100ba90610417565b915050610035565b5081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060008190555050505061045f565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101758261012c565b810181811067ffffffffffffffff821117156101945761019361013d565b5b80604052505050565b60006101a7610113565b90506101b3828261016c565b919050565b600067ffffffffffffffff8211156101d3576101d261013d565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6101fc816101e9565b811461020757600080fd5b50565b600081519050610219816101f3565b92915050565b600061023261022d846101b8565b61019d565b90508083825260208201905060208402830185811115610255576102546101e4565b5b835b8181101561027e578061026a888261020a565b845260208401935050602081019050610257565b5050509392505050565b600082601f83011261029d5761029c610127565b5b81516102ad84826020860161021f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102e1826102b6565b9050919050565b6102f1816102d6565b81146102fc57600080fd5b50565b60008151905061030e816102e8565b92915050565b6000819050919050565b61032781610314565b811461033257600080fd5b50565b6000815190506103448161031e565b92915050565b6000806000606084860312156103635761036261011d565b5b600084015167ffffffffffffffff81111561038157610380610122565b5b61038d86828701610288565b935050602061039e868287016102ff565b92505060406103af86828701610335565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061042282610314565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610454576104536103e8565b5b600182019050919050565b6102b78061046e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063013cf08b1461004657806355a373d614610077578063d94c8caa14610095575b600080fd5b610060600480360381019061005b919061014e565b6100b3565b60405161006e9291906101a3565b60405180910390f35b61007f6100e7565b60405161008c919061024b565b60405180910390f35b61009d61010d565b6040516100aa9190610266565b60405180910390f35b600281815481106100c357600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600080fd5b6000819050919050565b61012b81610118565b811461013657600080fd5b50565b60008135905061014881610122565b92915050565b60006020828403121561016457610163610113565b5b600061017284828501610139565b91505092915050565b6000819050919050565b61018e8161017b565b82525050565b61019d81610118565b82525050565b60006040820190506101b86000830185610185565b6101c56020830184610194565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061021161020c610207846101cc565b6101ec565b6101cc565b9050919050565b6000610223826101f6565b9050919050565b600061023582610218565b9050919050565b6102458161022a565b82525050565b6000602082019050610260600083018461023c565b92915050565b600060208201905061027b6000830184610194565b9291505056fea264697066735822122084d8b7ed8089f4c46a24801c5c48719792cc8341e2fe031bd72bfbcfc491198164736f6c63430008110033";

type TokenizedBallotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenizedBallotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenizedBallot__factory extends ContractFactory {
  constructor(...args: TokenizedBallotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    proposalNames: PromiseOrValue<BytesLike>[],
    _tokenContract: PromiseOrValue<string>,
    _referenceBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenizedBallot> {
    return super.deploy(
      proposalNames,
      _tokenContract,
      _referenceBlock,
      overrides || {}
    ) as Promise<TokenizedBallot>;
  }
  override getDeployTransaction(
    proposalNames: PromiseOrValue<BytesLike>[],
    _tokenContract: PromiseOrValue<string>,
    _referenceBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      proposalNames,
      _tokenContract,
      _referenceBlock,
      overrides || {}
    );
  }
  override attach(address: string): TokenizedBallot {
    return super.attach(address) as TokenizedBallot;
  }
  override connect(signer: Signer): TokenizedBallot__factory {
    return super.connect(signer) as TokenizedBallot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenizedBallotInterface {
    return new utils.Interface(_abi) as TokenizedBallotInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenizedBallot {
    return new Contract(address, _abi, signerOrProvider) as TokenizedBallot;
  }
}
